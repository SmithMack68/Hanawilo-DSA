// Topic 1 Assignment

// 1. What is Big O Notation?
//     a way to measure the complexity of your code. The difficulty of a task as the data size increases. Helps to determine the best solution and how slow or fast your code is.
        // added solution // It is used to describe the worst case scenario of an algorithm. It is used to compare algorithms to see which one is more efficient. 
        //It is calculated by finding the dominant term in the algorithm. The dominant term is the term that grows the fastest. For example, if you have an algorithm that has a time complexity of O(n^2 + n), the dominant term is n^2, so the time complexity is O(n^2).

// 2. O(n!) - Factorial Time Complexity - 5 
//     - the time it takes to run an algorithm is directly proportional to the factorial of the inpiut 
//     size. Example: if the input size is 5, the time it takes to run the algorithm would be
//     5!(5*4*3*2*1)

            //added ex//  
            //  const factorial = (input) => {
            //        let result = 0;
            //        for (let i = 0; i < input.length; i++) {
            //            for (let j = 0; j < input.length; j++) {
            //                for (let k = 0; k < input.length; k++) {
            //                    result++;
            //                 }
            //            }
            //        }
            //        return result;
            //  }
            
    
//    O(n^2) - Quadratic Time Complexity - 4
//     - when you increase the size of the input by a multiplication factor Example: a loop within a loop. Iterating through an array of 10, with another loop inside it becomes 10x10 or 10x the data takes 100x more time
        // added answer// time complexity is when the time execution is proportional to the square of the input size. Meaning the O(n^2) complexity always looks at every element in the input, but it does it twice. An example would be a nested for loop that loops through every element of the array.
//     const twoSum = (nums, target) => {
//         for(let i = 0; i < nums.length; i++){
//         for(let j = i + 1; j < nums.length; j++){
//              if(nums[i]+nums[j] === target) {
//                 return [i,j]
//             }
//           }
//         }
//     }

            //added example// const quadratic = (input) => {
            //                   let result = 0;
            //                   for (let i = 0; i < input.length; i++) {
            //                       for (let j = 0; j < input.length; j++) {
            //                          result++;
            //                       }
            //                   }
            //                   return result;
            //                } 
        

//    O(n) - Linear Time Complexity - 3
//     - 1:1 relationship |b| data size and time completion. Example: All loops
//     for
//     while
//     .map()
//     .foreach()
//     If an array has 5x nums it will take 5x as long, 500x nums will take 500x

//     for(let i = 0; i < arr.length; i++){
//         constant element = arr[i]
//     }

        //added example// const linear = (input) => {
        //                   let result = 0;
        //                   for (let i = 0; i < input.length; i++) {
        //                        result++;
        //                   }  
        //                   return result;
        //                }

//    O(log n) - Logarithmic Time Complexity - 2
//     - when the time of execution is proportional to the logarithm of the input size
//     Example: leap frog - partial iteration. Doesn't hit every element in the array.
//     Most work happens at the start, then evens out.

//     const logTime = (arr) => {
//         let numOfLoops = 0
//         for(let i = 1; i < arr.length; i *= 2) {
//             numOfLoops++
//         }
//         return numOfLoops
//     }

//    O(1) - Constant Time Complexity - 1
//     - regardless of input size time to compute is the same. Ideal!!
//     Example: pushing/removing an element from end of an array - because the index values do not change, stack of book ex. Variables hold space complexity(unless function) doesn't change time
//     adding/subtracting 2 numbers (any mathematical computation)
//     accessing a value with an array index
//     .pop()
//     .push()

//     const twoSum = (num1, num2) => {
//         return num1 + num2
//     }

//     arr = [1,2,3,4,5]
//     arr1.push(6)

        //added example//  const constant = (input) => {
        //                     return imput[0];  
        //                 }


// 3. Why care about Big O and code performance?  
//     It helps us to determine the best algorithm to use when tackling a problem we want to solve.
//     It improves our code. 
//     Determines how fast it will eventually run.
//     Breaks it down into smaller parts which simplifies the "complexity" of operations as the 
//         input size grows.
//     Allows for scalability  
//     Time is $$
//     Slow code isn't good
//     Can focus on trends of operation

// 4. Why not use perfomance.now()?
//     Not all computers run at the same speed or have the same storage RAM + CPU differences
//     Requires ('perf_hooks')


// 5.   const someFunction = (arr1) => { 
//         arr1.push(1).pop()  // O(1) + O(1) = 2

//         for (let i = 0; i < arr1.length; i++) {
//              console.log('do something 2') // O(n) = n
//         }

//         for (let i = 0; i < arr1.length; i++) { 
//             console.log('do something 3') // O(n) = n
//         }

//         for (let i = 0; i < arr1.length; i++) {
//             for (let i = 0; i < arr1.length; i++) {
//                 console.log('do something 3') // O(n^2) = n^2
//             }
//         } 
//      }  

//     - the total complexity would be 2 + 2n + n^2 but using consolidated time it would be O(n^2)
//     - it always reduces to the worst performer, that carries the trend the shorter times don't matter, only the slowest


// 6. 1 + n + n^3 = n^3 consolidated O(n^3) 

// 7. Why can you ignore constants and consolidate time complexities? 
//     - because only the worst time complexity will have an impact on the code performance
//     - you ignore the constants Example: if running at 5n (runs on the order of the big O of n)
//     because as the N gets large, the 5 no longer matters. So the size of the input (n) DOES NOT 
//     MATTER
        //added example// We can consolidate our time complexities because it is easier to compare the time complexities of different algorithms when they are all in the same format. For example, if we have an algorithm that has a time complexity of O(n^2 + n), we can consolidate the time complexity to O(n^2).

// 8. What is Space Complpexity and why does it matter?
//     - helps to analyze how much additional memory we need to allocate to compute our algorithm 
//     - how much space does the code take up, this is important because you don't want to run a function that exceeds the space, it will cause slow downs or worse
        //added example// For example, if an algorithm uses a lot of memory, it may run slower than an algorithm that uses less memory.

// 9.     
//     Boolean - constant
//     Undefined - constant
//     Null - constant
//     Numbers  - constant
//     String - linear
//     Array - linear (general)
//     Object - linear (general)

// 10. Reasons to use an array or object?
//     - use an array when you need fast access to elements and need indices(ordered)
        //added answer// need to store a list of elements that are ordered
//     - use on object when you DON'T need fast access or order


// 11.     const obj = { 
//             name: 'tony' 
//         }

//         //inserting
//         obj.age = 44; // constant
        
//         //removing
//         delete obj.age; // constant
        
//         //searching 1
//         obj.hasOwnProperty['name'] // constant

//         //searching 2
//         for (const prop in obj) { 
//             console.log(obj[prop]) // linear
//         }
//         //accessing 
//         obj.age // constant

//         //retrieving keys
//         Object.keys(obj) // linear

//         //retrieving values
//         Object.values(obj)  // linear


// 12. 
//     const arr2 = [1, 2, 3, 4, 5, 6, 7]; 

//     //inserting 1
//     arr2.push(8) // constant

//     //inserting 2
//     arr2.unshift(0) // linear

//     //removing 1
//     arr2.pop() // constant

//     //removing 2
//     arr2.shift() // linear

//     //searching 1
//     const findNumber = arr2.find(num => num === 2) // linear

//     //searching 2
//     for (let i = 0; i < arr2.length; i++) { // linear
//          if (arr2[i] === 2) {
//             return arr2[i]
//          }
//     }

//     //retrieving
//     const getNumber = arr2[3]  // constant

//     //method 1
//     const double = arr2.map(num => num * 2) //linear loop
    
//     //method 2
//     const removeAndAddNewNumber = arr2.splice(1, 1, 5) // linear indices change
    
//     //method 3
//     const getSum = arr2.reduce((total, num) => total + num, 0) //linear sort of a loop

//     //method 4
//     for (const num of nums) { 
//         console.log(num * 2) // linear
//     }

//     //method 5
//     const convertToString = arr2.join(' ') // linear 


// 13. 
//     P1 T O(n) = n  One for loop all loops are //linear
//        S O(1) = //added answer// not creating any new variables or arrays, just returning index

//     P2 T O(n) .forEach // linear
//        ***  S O(1) .push?? I got this wrong 
//        S O(n) why we are creating a new array that is the same size as the input array
//         

//     P3 T O(1) // constant  no indices are changing 
//        S O(1) //added answer// not creating any new variables or arrays, just returning a string 

//     P4 T O(n) // for loop //linear
//        S O(1)  not creating, returning a number 

//     P5 T O(1) // constant simple math
//        S O(1) not creating, returning number

//     P6 T Did not get this one only space //added answer// O(log n) we are using a recursive function that divides the array in half each time
//        S 0(1) 

//     P7 T O(n^2) loop inside loop and a push n^2 + 1 = n^2 // quadratic
//        S O(n) creating a new array //added aswer//same size as input array

//     P8 T O(n^2) loop inside loop n^2 // quadratic
//        *** S O(1) not creating I got this wrong WHY? O(n)***

//     P9 T O(n^2)loop + push O(n) + O(1) not sure about includes(loop? I think yes)
//        S O(n) creating and returning an array //added answer// same size

//     p10 T O(n) filter + reduce = 2n // linear
//         S O(n) creating and returning an array //added answer// same size



//  I am a little confused about space, I thought I understood but 13.8 had me confused